generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum Visibility {
  public
  private
}

enum BookReview {
  like
  dislike
  unrated
}

enum BookStatus {
  readed
  toRead
  dropped
  reading
}

enum Sender {
  user
  ai
}

enum RatingLabel {
  extremelyPositive
  veryPositive
  mostlyPositive
  mixed
  negative
  veryNegative
  unrated
}

model User {
  id        String   @id @unique
  name      String
  email     String   @unique
  password  String?
  theme     String?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  library   Library[] // Cada usuario puede tener muchos libros en su biblioteca
  libraryVisibility Visibility @default(private)
  comments  Comment[]
  chats     Chat[]
}

model Library {
  id          Int       @id @default(autoincrement())
  user        User      @relation(fields: [userId], references: [id])
  userId      String
  book        Book      @relation(fields: [bookId], references: [id])
  bookId      String
  bookReview  BookReview?    // like, dislike, unrated
  bookStatus  BookStatus    // read, to read, dropped, reading
  createdAt   DateTime  @default(now())
  modifiedAt  DateTime @updatedAt
}

model Book {
  id             String   @id // Usa el mismo ID de la API
  title          String
  description    String?
  author         String
  cover          String?
  publishedDate  DateTime?
  subjects       String[]
  country        String?
  rating         RatingLabel
  createdAt      DateTime @default(now())
  libraries      Library[]
  comments       Comment[]
}

model Comment {
  id        Int      @id @default(autoincrement())
  user      User     @relation(fields: [userId], references: [id])
  userId    String
  book      Book     @relation(fields: [bookId], references: [id])
  bookId    String
  content   String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Chat {
  id         Int       @id @default(autoincrement())
  user       User      @relation(fields: [userId], references: [id])
  userId     String
  visibility Visibility    // public | private
  createdAt  DateTime  @default(now())
  messages   Message[]
}

model Message {
  id        Int      @id @default(autoincrement())
  chat      Chat     @relation(fields: [chatId], references: [id])
  chatId    Int
  content   String
  sender    Sender   // user | IA
  createdAt DateTime @default(now())
}
